import groovy.json.JsonOutput

pipeline {
  agent any
  options {
    disableConcurrentBuilds()
    disableResume()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    timeout(time: 1, unit: 'HOURS')
  }
  parameters {
    choice(name: 'TARGET_REPOSITORY', choices: ['qa', 'prod'], description: 'Jfrog target repository for promotion')
    string(name: 'BUILD_NUMBER', defaultValue: '1.0', description: 'Jfrog Build Info Build Number')
  }
  environment {
    ARTIFACTORY_URL = "https://vigneshsweekaran2.jfrog.io"
    BUILD_NAME = "hello-world-java"
    ARTIFACTORY_CREDENTIAL_ID = "jfrog-credential"
  }
  stages {
    stage ("Promotion") {
      steps {
        script {
          def sourecRepository = "dev"
          if ("${params.TARGET_REPOSITORY}" == "prod") {
            sourecRepository = "qa"
          }
          def promotionConfig = JsonOutput.toJson([
            status: "promoting",
            sourceRepo: "docker-helloworld-${sourecRepository}-local",
            targetRepo: "docker-helloworld-${params.TARGET_REPOSITORY}-local",
            copy: true,
            failFast: true
          ])

          withCredentials([usernamePassword(credentialsId: "${ARTIFACTORY_CREDENTIAL_ID}", usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
            sh """
              curl -u${ARTIFACTORY_USERNAME}:${ARTIFACTORY_PASSWORD} -X POST ${ARTIFACTORY_URL}/artifactory/api/build/promote/${BUILD_NAME}/${params.BUILD_NUMBER} -H \"Content-Type: application/json\" --data '${promotionConfig}'
            """
          }
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}